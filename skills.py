import sqlite3
import json
import re
import bleach
from collections import Counter

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOP_SKILLS_LIMIT = 50
TOP_KEYWORDS_LIMIT = 50

# –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
STOP_WORDS = {
    # –ß–∏—Å–ª–∞
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '00', '10', '11', '12', '13', '14', '15', 
    '16', '17', '18', '19', '20', '30', '39', '50', '60', '70', '80', '90', '100', '000',
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    'and', 'the', 'to', 'of', 'you', 'in', 'with', 'for', 'a', 'an', 'is', 'are', 'be', 
    'been', 'have', 'has', 'had', 'will', 'would', 'could', 'should', 'may', 'might',
    'this', 'that', 'these', 'those', 'he', 'she', 'it', 'they', 'we', 'us', 'our',
    
    # –û–±—â–∏–µ IT —Å–ª–æ–≤–∞
    'it', 'skills', 'back', 'end', 'experience', 'work', 'working', 'job', 'position', 
    'role', 'team', 'project', 'projects', 'development', 'developer', 'specialist',
    'engineer', 'technology', 'technologies', 'months', 'years', 'code', 'review',
    'senior', 'junior', 'middle', 'lead', 'data', 'science', 'web', 'your', 'our',
    'will', 'can', 'must', 'need', 'good', 'strong', 'excellent', 'high', 'low',
    'design', 'support', 'on', 'node', 'js',
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π (–Ω–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)
    'ozon', 'yandex', 'google', 'microsoft', 'apple', 'amazon', 'facebook', 'meta',
    'sber', 'tinkoff', 'avito', 'wildberries', 'kaspersky', 'jetbrains',
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—á–∏–π –º—É—Å–æ—Ä
    '5', '2', 'b2b', 'b2c', 'java', 'schedule', 'remote', 'office', 'salary',
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä  
    'quot', 'ru', 'etc', 'er', 'e', 'o', 'nbsp', 'amp', 'gt', 'lt', 'strong', 'em', 'br',
    'div', 'span', 'p', 'ul', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
}

class SkillAnalyzer:
    def __init__(self, db_path: str = "vacancies.db"):
        self.db_path = db_path
    
    def analyze_skills(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—É –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ key_skills"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT skills FROM vacancies WHERE skills IS NOT NULL AND skills != ''")
        results = cursor.fetchall()
        conn.close()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
        all_skills = []
        for (skills_json,) in results:
            try:
                skills = json.loads(skills_json)
                all_skills.extend(skills)
            except:
                continue
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º
        counter = Counter(all_skills)
        
        print(f"üîß –ù–ê–í–´–ö–ò –ò–ó KEY_SKILLS (—Ç–æ–ø {TOP_SKILLS_LIMIT}):")
        print(f"–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞–≤—ã–∫–æ–≤: {len(all_skills)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(counter)}")
        print()
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        for i, (skill, count) in enumerate(counter.most_common(TOP_SKILLS_LIMIT), 1):
            print(f"{i}. {skill}: {count}")
    
    def extract_keywords_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        if not text:
            return []
        
        # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏
        clean_text = bleach.clean(text, tags=[], strip=True)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (—Å –¥–µ—Ñ–∏—Å–∞–º–∏, —Å–ª–µ—à–∞–º–∏)
        words = re.findall(r'[A-Za-z0-9]+(?:[/\-][A-Za-z0-9]+)*', clean_text)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        keywords = []
        for word in words:
            word = word.lower()
            if len(word) >= 2 and word not in STOP_WORDS:
                keywords.append(word)
        
        return keywords
    
    def analyze_keywords(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT description FROM vacancies WHERE description IS NOT NULL AND description != ''")
        results = cursor.fetchall()
        conn.close()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        all_keywords = []
        print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π...")
        
        for i, (description,) in enumerate(results, 1):
            if i % 50 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –≤–∞–∫–∞–Ω—Å–∏–π
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(results)}")
            
            keywords = self.extract_keywords_from_text(description)
            all_keywords.extend(keywords)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º
        counter = Counter(all_keywords)
        
        print(f"\nüìù –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –ò–ó –û–ü–ò–°–ê–ù–ò–ô (—Ç–æ–ø {TOP_KEYWORDS_LIMIT}):")
        print(f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(all_keywords)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {len(counter)}")
        print()
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        for i, (keyword, count) in enumerate(counter.most_common(TOP_KEYWORDS_LIMIT), 1):
            print(f"{i}. {keyword}: {count}")
    
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        print("–ê–ù–ê–õ–ò–ó –í–ê–ö–ê–ù–°–ò–ô")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM vacancies")
        total_vacancies = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM vacancies WHERE skills IS NOT NULL AND skills != ''")
        vacancies_with_skills = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM vacancies WHERE description IS NOT NULL AND description != ''")
        vacancies_with_description = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ: {total_vacancies}")
        print(f"–í–∞–∫–∞–Ω—Å–∏–π —Å –Ω–∞–≤—ã–∫–∞–º–∏: {vacancies_with_skills}")
        print(f"–í–∞–∫–∞–Ω—Å–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {vacancies_with_description}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        self.analyze_skills()
        
        print("\n" + "=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        self.analyze_keywords()

def main():
    analyzer = SkillAnalyzer()
    analyzer.run_full_analysis()

if __name__ == "__main__":
    main()