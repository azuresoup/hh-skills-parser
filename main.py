import requests
import sqlite3
import json
import time
import sys
from typing import List, Dict, Optional

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
class SearchConstants:
    # –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ python, java, javascript –∏ —Ç.–¥.)
    DEFAULT_SEARCH_QUERY = "golang OR go developer"
    LANGUAGE_KEYWORDS = ['go', 'golang']
    
    # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞ (—Ç—É—Ç —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –Ω–æ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞)
    EXCLUDED_WORDS = ['lead', '–ª–∏–¥', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–º–µ–Ω—Ç–æ—Ä', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–º–µ–Ω–µ–¥–∂–µ—Ä']

class HHVacancyParser:
    def __init__(self, db_path: str = "vacancies.db"):
        self.db_path = db_path
        self.base_url = "https://api.hh.ru"
        self.headers = {
            'User-Agent': 'vacancy-parser-python'
        }
        self.init_database()
    
    def init_database(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS vacancies (
                id INTEGER PRIMARY KEY,
                hh_id VARCHAR(50) UNIQUE,
                title VARCHAR(500),
                description TEXT,
                skills TEXT,
                url VARCHAR(500),
                employer VARCHAR(300),
                salary_from INTEGER,
                salary_to INTEGER,
                currency VARCHAR(10),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        conn.commit()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def vacancy_exists(self, hh_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT 1 FROM vacancies WHERE hh_id = ?", (hh_id,))
        exists = cursor.fetchone() is not None
        
        conn.close()
        return exists
    
    def save_vacancy(self, vacancy_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute("""
                INSERT INTO vacancies 
                (hh_id, title, description, skills, url, employer, salary_from, salary_to, currency)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                vacancy_data['hh_id'],
                vacancy_data['title'],
                vacancy_data['description'],
                vacancy_data['skills'],
                vacancy_data['url'],
                vacancy_data['employer'],
                vacancy_data['salary_from'],
                vacancy_data['salary_to'],
                vacancy_data['currency']
            ))
            
            conn.commit()
            print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: {vacancy_data['title']}")
            
        except sqlite3.IntegrityError:
            print(f"‚ö† –í–∞–∫–∞–Ω—Å–∏—è {vacancy_data['hh_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        finally:
            conn.close()
    
    def search_vacancies(self, text: str = SearchConstants.DEFAULT_SEARCH_QUERY, area: str = None) -> List[Dict]:
        """–ò—â–µ—Ç –í–°–ï –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        all_vacancies = []
        page = 0
        
        while True:
            print(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page + 1}...")
            
            params = {
                'text': text,
                'page': page,
                'per_page': 100,
                'search_field': 'name'  # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º area —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if area:
                params['area'] = area
            
            try:
                response = requests.get(
                    f"{self.base_url}/vacancies",
                    headers=self.headers,
                    params=params,
                    timeout=15
                )
                
                if response.status_code == 200:
                    data = response.json()
                    vacancies = data.get('items', [])
                    total_pages = data.get('pages', 0)
                    total_found = data.get('found', 0)
                    
                    if page == 0:
                        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_found} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    filtered_vacancies = []
                    for vacancy in vacancies:
                        title = vacancy['name'].lower()
                        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        if any(keyword in title for keyword in SearchConstants.LANGUAGE_KEYWORDS):
                            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ EXCLUDED_WORDS
                            if not any(word in title for word in SearchConstants.EXCLUDED_WORDS):
                                filtered_vacancies.append(vacancy)
                            else:
                                print(f"  ‚úó {vacancy['name']} (–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞)")
                        else:
                            print(f"  ‚úó {vacancy['name']} (–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)")
                    
                    all_vacancies.extend(filtered_vacancies)
                    
                    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}: –Ω–∞–π–¥–µ–Ω–æ {len(vacancies)}, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(filtered_vacancies)}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤—ã—Ö–æ–¥–∏–º
                    if len(vacancies) == 0 or page >= total_pages - 1:
                        print("–í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                        break
                        
                else:
                    print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                    break
                    
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                break
            
            page += 1
            
            # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            time.sleep(3)
        
        return all_vacancies
    
    def get_vacancy_details(self, vacancy_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            response = requests.get(
                f"{self.base_url}/vacancies/{vacancy_id}",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: {response.status_code}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
            return None
    
    def parse_vacancy_data(self, vacancy_summary: Dict, vacancy_details: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≤—ã–∫–∏
        skills = []
        if vacancy_details and 'key_skills' in vacancy_details:
            skills = [skill['name'] for skill in vacancy_details['key_skills']]
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = ""
        if vacancy_details and 'description' in vacancy_details:
            # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            import re
            description = re.sub('<[^<]+?>', '', vacancy_details['description'])
            description = description.strip()
        
        # –ó–∞—Ä–ø–ª–∞—Ç–∞
        salary_from = None
        salary_to = None
        currency = None
        
        if vacancy_summary.get('salary'):
            salary = vacancy_summary['salary']
            salary_from = salary.get('from')
            salary_to = salary.get('to')
            currency = salary.get('currency')
        
        return {
            'hh_id': vacancy_summary['id'],
            'title': vacancy_summary['name'],
            'description': description[:10000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            'skills': json.dumps(skills, ensure_ascii=False),
            'url': vacancy_summary['alternate_url'],
            'employer': vacancy_summary['employer']['name'],
            'salary_from': salary_from,
            'salary_to': salary_to,
            'currency': currency
        }
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π HeadHunter")
        print("=" * 50)
        
        # –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        vacancies = self.search_vacancies()
        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        new_count = 0
        existing_count = 0
        
        for i, vacancy in enumerate(vacancies, 1):
            vacancy_id = vacancy['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î
            if self.vacancy_exists(vacancy_id):
                existing_count += 1
                print(f"[{i}/{len(vacancies)}] ‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é (—É–∂–µ –µ—Å—Ç—å): {vacancy['name']}")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
            print(f"[{i}/{len(vacancies)}] üì• –ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç–∞–ª–∏: {vacancy['name']}")
            details = self.get_vacancy_details(vacancy_id)
            
            # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            vacancy_data = self.parse_vacancy_data(vacancy, details)
            self.save_vacancy(vacancy_data)
            
            new_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–£–í–ï–õ–ò–ß–ï–ù–ê –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            time.sleep(2)
        
        print("\n" + "=" * 50)
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìà –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {new_count}")
        print(f"üìã –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {existing_count}")

def main():
    parser = HHVacancyParser()
    parser.run()

if __name__ == "__main__":
    main()